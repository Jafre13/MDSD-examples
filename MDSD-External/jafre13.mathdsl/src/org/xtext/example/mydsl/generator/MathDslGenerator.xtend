/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.mathDsl.AllExp
import org.xtext.example.mydsl.mathDsl.MathExp
import org.xtext.example.mydsl.mathDsl.RawInteger
import org.xtext.example.mydsl.mathDsl.Addition
import org.xtext.example.mydsl.mathDsl.Subtraction
import org.xtext.example.mydsl.mathDsl.Multiplication
import org.xtext.example.mydsl.mathDsl.Division
import org.xtext.example.mydsl.mathDsl.RawVariable

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathDslGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(AllExp).next.generateProgram(fsa)
	}
	
	def void generateProgram(AllExp ae, IFileSystemAccess2 fsa){		
		fsa.generateFile(ae.name+".java",ae.generateClass)
	}
	
	def generateClass(AllExp exp)'''
	package dslstuff;
	public class «exp.name» {
		«FOR e:exp.exps»
		«e.generateMathExp»
		«ENDFOR»
	}
	'''
	
	def generateMathExp(MathExp me)'''
	public static final int «me.name» = «me.exp.generateExp»;
	'''
	
	def dispatch CharSequence generateExp(RawInteger ri)'''«ri.value»'''	
	def dispatch CharSequence generateExp(RawVariable rv)'''«rv.value.name»'''
	def dispatch CharSequence generateExp(Addition ad)'''(«ad.left.generateExp»+«ad.right.generateExp»)'''
	def dispatch CharSequence generateExp(Subtraction sub)'''(«sub.left.generateExp»-«sub.right.generateExp»)'''
	def dispatch CharSequence generateExp(Multiplication mul)'''(«mul.left.generateExp»*«mul.right.generateExp»)'''
	def dispatch CharSequence generateExp(Division div)'''(«div.left.generateExp»/«div.right.generateExp»)'''
}
