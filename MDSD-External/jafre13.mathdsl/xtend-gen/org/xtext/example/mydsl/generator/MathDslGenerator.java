/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.example.mydsl.mathDsl.Addition;
import org.xtext.example.mydsl.mathDsl.AllExp;
import org.xtext.example.mydsl.mathDsl.Division;
import org.xtext.example.mydsl.mathDsl.Expression;
import org.xtext.example.mydsl.mathDsl.MathExp;
import org.xtext.example.mydsl.mathDsl.Multiplication;
import org.xtext.example.mydsl.mathDsl.RawInteger;
import org.xtext.example.mydsl.mathDsl.RawVariable;
import org.xtext.example.mydsl.mathDsl.Subtraction;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.generateProgram(Iterators.<AllExp>filter(resource.getAllContents(), AllExp.class).next(), fsa);
  }
  
  public void generateProgram(final AllExp ae, final IFileSystemAccess2 fsa) {
    String _name = ae.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.generateClass(ae));
  }
  
  public CharSequence generateClass(final AllExp exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package dslstuff;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = exp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<MathExp> _exps = exp.getExps();
      for(final MathExp e : _exps) {
        _builder.append("\t");
        CharSequence _generateMathExp = this.generateMathExp(e);
        _builder.append(_generateMathExp, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMathExp(final MathExp me) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public static final int ");
    String _name = me.getName();
    _builder.append(_name);
    _builder.append(" = ");
    CharSequence _generateExp = this.generateExp(me.getExp());
    _builder.append(_generateExp);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateExp(final RawInteger ri) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = ri.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _generateExp(final RawVariable rv) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = rv.getValue().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateExp(final Addition ad) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _generateExp = this.generateExp(ad.getLeft());
    _builder.append(_generateExp);
    _builder.append("+");
    CharSequence _generateExp_1 = this.generateExp(ad.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _generateExp(final Subtraction sub) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _generateExp = this.generateExp(sub.getLeft());
    _builder.append(_generateExp);
    _builder.append("-");
    CharSequence _generateExp_1 = this.generateExp(sub.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _generateExp(final Multiplication mul) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _generateExp = this.generateExp(mul.getLeft());
    _builder.append(_generateExp);
    _builder.append("*");
    CharSequence _generateExp_1 = this.generateExp(mul.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _generateExp(final Division div) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _generateExp = this.generateExp(div.getLeft());
    _builder.append(_generateExp);
    _builder.append("/");
    CharSequence _generateExp_1 = this.generateExp(div.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence generateExp(final Expression ad) {
    if (ad instanceof Addition) {
      return _generateExp((Addition)ad);
    } else if (ad instanceof Division) {
      return _generateExp((Division)ad);
    } else if (ad instanceof Multiplication) {
      return _generateExp((Multiplication)ad);
    } else if (ad instanceof RawInteger) {
      return _generateExp((RawInteger)ad);
    } else if (ad instanceof RawVariable) {
      return _generateExp((RawVariable)ad);
    } else if (ad instanceof Subtraction) {
      return _generateExp((Subtraction)ad);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ad).toString());
    }
  }
}
